#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 5.1
#  in conjunction with Tcl version 8.6
#    Jul 25, 2020 08:25:51 PM CST  platform: Windows NT

from typing import List, Optional, Union

import os
import sys
import atexit

# from threading import Thread
# from textwrap import dedent
from pathlib import Path
# import blinker
# from blinker import signal

from tkinter import filedialog
from tkinter import messagebox

import blinker
import logzero
from logzero import logger

from tkaligner.insert_column import insert_column
from tkaligner.load_paras import load_paras

from tkaligner.myprogressbar_ui import Mypbar
import tkaligner.myprogressbar_ui_support
from tkaligner.longtime_job import longtime_job


# execute set PYTHONPATH=tkaligner;%PYTHONPATH%
# to avoid .
from mypad import MyPad  # mypad_ui.tcl/py?
from mytable import MyTable
from queues import QUEUE_SPINBOX
from extract_rows import extract_rows

import tkinter as tk
import tkinter.ttk as ttk

import aligner_ui_support
from queue1_put import queue1_put
from support import on_howto, on_about

from open1_command import open1_command
from open2_command import open2_command
from paste1_command import paste1_command
from paste2_command import paste2_command
from savetmx_command import savetmx_command
from savecsv_command import savecsv_command
from savexlsx_command import savexlsx_command
from quit_command import quit_command

from palign_command import palign_command
from salign_command import salign_command
from reset_command import reset_command

# to update table when loading files with open1 open2
SIG_TABLE = blinker.signal('table')
SIG_ALIGNER = blinker.signal('aligner')

_ = os.environ.get("ALIGNER_DEBUG")
if _ is not None and _.lower() in ["1", "true"]:
    level = 10
else:
    level = 20
from logzero import setup_logger
logger = setup_logger(
    name=__file__,
    level=level,
)
logger.debug('os.environ.get("ALIGNER_DEBUG"): %s', _)


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    root.withdraw()

    w = tk.Toplevel (root)
    Aligner (w)  # root = tk.Tk(); w = tk.Toplevel (root); from myclass import self; self = Aligner (w)

    # top = Aligner (root)
    # aligner_ui_support.init(root, top)

    logger.debug('vp_start_gui debug ')

    root.mainloop()

w = None
def create_Aligner(rt, *args, **kwargs):
    '''Starting point when module is imported by another module.
       Correct form of call: 'create_Aligner(root, *args, **kwargs)' .'''
    global w, w_win, root
    #rt = root
    root = rt
    w = tk.Toplevel (root)
    top = Aligner (w)
    aligner_ui_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_Aligner():
    global w
    w.destroy()
    w = None

class Aligner:
    def __init__(self, top=None):
        super().__init__()
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''

        # atexit.register(quit_command, self)
        self.top = top
        self.pbtoplevel: Optional[tk.Toplevel] = None
        iconpath = Path(__file__).parent / "align.ico"
        top.iconbitmap(str(iconpath))
        self.spinbox = ''
        # QUEUE_SPINBOX.put('*')
        queue1_put(QUEUE_SPINBOX, '*')

        def handle_signal(sender, **kw):
            self.slot(sender, **kw)
        self.handle_signal = handle_signal  # important, not for nothing
        SIG_ALIGNER.connect(handle_signal)
        # in effect SIG_ALIGNER.connect(self.slot)

        # aux props
        self.filename1 = ""
        self.filename2 = ""
        self.text1 = ""  # type: Union[str, List[str]]
        self.text2 = ""  # type: Union[str, List[str]]
        self.paras1 = ""
        self.paras2 = ""
        self.paras_merit = ""
        self.sents1 = ""
        self.sents2 = ""
        self.sents_merit = ""
        self.paligned = False
        self.saligned = False

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85'
        _ana2color = '#ececec' # Closest X11 color: 'gray92'
        font9 = "-family {Segoe UI} -size 9"

        top.geometry("980x625+100+25")
        top.minsize(120, 1)
        top.maxsize(1284, 781)
        top.resizable(1, 1)
        top.title("Tkaligner")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.FramePad = tk.Frame(top)
        self.FramePad.place(relx=0.0, rely=0.0, relheight=0.5, relwidth=1.0)
        self.FramePad.configure(relief='groove')
        self.FramePad.configure(borderwidth="2")
        self.FramePad.configure(relief="groove")
        self.FramePad.configure(background="#d9d9d9")
        self.FramePad.configure(highlightbackground="#d9d9d9")
        self.FramePad.configure(highlightcolor="black")

        # self.Pad = aligner_ui_support.Custom(self.FramePad)
        self.Pad = MyPad(self.FramePad)
        self.Pad.c01.configure(wrap="word")
        self.Pad.c02.configure(wrap="word")
        self.Pad.c11.configure(wrap="word")
        self.Pad.c12.configure(wrap="word")
        self.Pad.c21.configure(wrap="word")
        self.Pad.c22.configure(wrap="word")

        self.Pad.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)

        self.FrameTable = tk.Frame(top)
        self.FrameTable.place(relx=0.0, rely=0.5, relheight=0.5, relwidth=1.0)
        self.FrameTable.configure(relief='groove')
        self.FrameTable.configure(borderwidth="2")
        self.FrameTable.configure(relief="groove")
        self.FrameTable.configure(background="#d9d9d9")
        self.FrameTable.configure(highlightbackground="#d9d9d9")
        self.FrameTable.configure(highlightcolor="black")

        # self.Table = aligner_ui_support.Custom(self.FrameTable)
        self.Table = MyTable(self.FrameTable)
        self.Table.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=1.0)
        self.Table.show()

        self.menubar = tk.Menu(top,font=font9,bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.sub_menu = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkDefaultFont",
                foreground="#000000",
                label="File")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl+O",
                background="#d9d9d9",
                # command=aligner_ui_support.self.open1_command,
                # command=self.open1_command,
                command=lambda: open1_command(self),
                font="TkDefaultFont",
                foreground="#000000",
                label="Open1",
                underline=0)
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl+N",
                background="#d9d9d9",
                # command=aligner_ui_support.self.open2_command,
                # command=self.open2_command,
                command=lambda: open2_command(self),
                font="TkDefaultFont",
                foreground="#000000",
                label="Open2",
                underline=1)
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                # accelerator="Ctrl+O",
                background="#d9d9d9",
                # command=aligner_ui_support.self.open1_command,
                # command=self.open1_command,
                command=lambda: paste1_command(self),
                font="TkDefaultFont",
                foreground="#000000",
                label="Paste1",
                underline=0)
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                # accelerator="Ctrl+N",
                background="#d9d9d9",
                # command=aligner_ui_support.self.open2_command,
                # command=self.open2_command,
                command=lambda: paste2_command(self),
                font="TkDefaultFont",
                foreground="#000000",
                label="Paste2",
                underline=1)
        self.sub_menu.add_separator(
                background="#d9d9d9")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                # accelerator="Ctrl+C",
                background="#d9d9d9",
                # command=aligner_ui_support.self.savecsv_command,
                # command=self.savecsv_command,
                command=lambda: savecsv_command(self),
                font="TkDefaultFont",
                foreground="#000000",
                label="SaveCsv",
                underline=4)
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl+T",
                background="#d9d9d9",
                # command=aligner_ui_support.self.savetmx_command,
                # command=self.savetmx_command,
                command=lambda: savetmx_command(self),
                font="TkDefaultFont",
                foreground="#000000",
                label="SaveTMX",
                underline=5)
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                # accelerator="Ctrl+X",
                accelerator="Ctrl+L",
                background="#d9d9d9",
                command=lambda: savexlsx_command(self),
                foreground="#000000",
                label="SaveXlsx",
                underline=7)
        self.sub_menu.add_separator(
                background="#d9d9d9")
        self.sub_menu.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl-Q",
                background="#d9d9d9",
                # command=self.quit_command,
                command=lambda: quit_command(self),
                font="TkDefaultFont",
                foreground="#000000",
                label="Quit",
                underline=0)
        self.sub_menu1 = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu1,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkDefaultFont",
                foreground="#000000",
                label="Edit")
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl+P",
                background="#d9d9d9",
                # command=self.palign_command,
                command=lambda: palign_command(self),
                font="TkDefaultFont",
                foreground="#000000",
                label="PAlign",
                underline=0)
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl+S",
                background="#d9d9d9",
                # command=self.salign_command,
                command=lambda: salign_command(self),
                font="TkDefaultFont",
                foreground="#000000",
                label="SAlign",
                underline=0)
        self.sub_menu1.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl+R",
                background="#d9d9d9",
                # command=self.reset_command,
                command=lambda: reset_command(self),
                font="TkDefaultFont",
                foreground="#000000",
                label="Reset",
                underline=0)
        self.sub_menu12 = tk.Menu(top,tearoff=0)
        self.menubar.add_cascade(menu=self.sub_menu12,
                activebackground="#ececec",
                activeforeground="#000000",
                background="#d9d9d9",
                font="TkDefaultFont",
                foreground="#000000",
                label="Help")
        self.sub_menu12.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl+H",
                background="#d9d9d9",
                command=on_howto,
                font="TkDefaultFont",
                foreground="#000000",
                label="Howto",
                underline=0)
        self.sub_menu12.add_command(
                activebackground="#ececec",
                activeforeground="#000000",
                accelerator="Ctrl-I",
                background="#d9d9d9",
                command=on_about,
                font="TkDefaultFont",
                foreground="#000000",
                label="About",
                underline=0)

        self.sub_menu.bind_all('<Control-Key-h>',lambda e:on_howto(e))
        self.sub_menu.bind_all('<Control-Key-i>',lambda e:on_about(e))

        # self.sub_menu.bind_all('<Control-Key-o>',lambda e: self.open1_command(e))
        self.sub_menu.bind_all('<Control-Key-o>',lambda e: open1_command(self, event=e))
        # self.sub_menu.bind_all('<Control-Key-p>',lambda e: self.open2_command(e))
        self.sub_menu.bind_all('<Control-Key-n>',lambda e: open2_command(self, event=e))
        # self.sub_menu.bind_all('<Control-Key-t>',lambda e: self.savecsv_command(e))
        # self.sub_menu.bind_all('<Control-Key-c>',lambda e: savecsv_command(self, event=e))
        # self.sub_menu.bind_all('<Control-Key-m>',lambda e: self.savetmx_command(e))
        self.sub_menu.bind_all('<Control-Key-m>',lambda e: savetmx_command(self, event=e))
        # self.sub_menu.bind_all('<Control-Key-x>',lambda e: savexlsx_command(self, event=e))
        self.sub_menu.bind_all('<Control-Key-l>',lambda e: savexlsx_command(self, event=e))
        self.sub_menu.bind_all('<Control-Key-q>',lambda e: quit_command(self, event=e))

        self.sub_menu.bind_all('<Control-Key-p>',lambda e: palign_command(self, event=e))
        self.sub_menu.bind_all('<Control-Key-s>',lambda e: salign_command(self, event=e))
        self.sub_menu.bind_all('<Control-Key-r>',lambda e: reset_command(self, event=e))

        # some menu itmes initially disabled
        self.sub_menu1.entryconfig("PAlign", state="disabled")
        self.sub_menu1.entryconfig("SAlign", state="disabled")

    def slot(self, sender, **kw):
        """ handle signal data sent to SIG_ALIGNER.
            e.g., SIG_ALIGNER.send("sender", **{"sent_lst": data})
            or  SIG_ALIGNER.send("sender", sent_lst=data)
        """
        # print(" aligner received ", sender, kw)
        if kw.get("sent_lst"):
            self.sent_lst = kw.get("sent_lst")
            # print(" it works! self.sent_lst = ", self.sent_lst)

        if kw.get("PAlign") is not None:
            if kw.get("PAlign"):
                self.sub_menu1.entryconfig("PAlign", state="normal")
            else:
                self.sub_menu1.entryconfig("PAlign", state="disabled")

        if kw.get("SAlign") is not None:
            if kw.get("SAlign"):
                self.sub_menu1.entryconfig("SAlign", state="normal")
            else:
                self.sub_menu1.entryconfig("SAlign", state="disabled")
        _ = """   # cant disable Pad (tk.Frame)
        # if kw.get("Pad") is not None:
            if kw.get("Pad"):
                # self.Pad.config(state="normal")
                ...
            else:
                # self.Pad.config(state="disabled")
                ...
        # """

        logger.debug(" kw received: %s", str(kw)[:50])
        # logger.debug(" kw received")
        logger.debug(""" kw.get("pbtoplevel"): %s""", kw.get("pbtoplevel"))
        logger.debug(""" self.pbtoplevel: %s""", self.pbtoplevel)

        # grab_set grab_release for progressbar Toplevel self.pbtoplebel
        if kw.get("pbtoplevel") is not None:
            if kw.get("pbtoplevel"):
                if self.pbtoplevel is not None:
                    try:
                        self.pbtoplevel.grab_set()
                        logger.debug(" supposed to do  self.pbtoplevel.grab_set() ")
                    except Exception as exc:
                        logger.error(" supposed to do  self.pbtoplevel.grab_set() here, exception? exc:, %s", exc)
            else:
                if self.pbtoplevel is not None:
                    self.pbtoplevel.grab_release()
                    logger.debug(" supposed to do  self.pbtoplevel.grab_release() ")

        logger.debug(" slot exit ")

if __name__ == '__main__':
    import os
    _ = os.environ.get("ALIGNER_DEBUG")
    logger.info('os.environ.get("ALIGNER_DEBUG"): %s', _)
    if _ is not None and (_ == '1' or _.lower() == 'true'):
        logzero.loglevel(10)  # 10: DEBUG, default 20: INFO:
    else:
        logzero.loglevel(20)
    vp_start_gui()
