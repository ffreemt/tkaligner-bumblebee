#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.24.1
#  in conjunction with Tcl version 8.6
#    Oct 14, 2019 12:40:59 AM CST  platform: Windows NT
# pylint: disable=wrong-import-order, ungrouped-imports, too-many-ancestors, too-few-public-methods, bare-except, too-many-statements, exec-used, missing-docstring, global-statement, invalid-name, too-many-instance-attributes, wrong-import-position, useless-object-inheritance
# pylint: disable=unused-argument,
# pylint: disable=unnecessary-lambda,
# pylint: disable=no-self-use,
# pylint: disable=bad-whitespace,

import os
import sys
# import logging
# from textwrap import dedent
import pandas as pd
from pathlib import Path

import blinker
import logzero
from logzero import logger

_ = os.environ.get("ALIGNER_DEBUG")
if _ is not None and (_ == '1' or _.lower() == 'true'):
    logzero.loglevel(10)
else:
    logzero.loglevel(20)
# logzero.loglevel(10)

try:
    import Tkinter as tk
except ImportError:
    import tkinter as tk

try:
    import ttk

    py3 = False
except ImportError:
    import tkinter.ttk as ttk

    py3 = True

import mypad_support
from update_pad_cell import update_pad_cell

# LOGGER = logging.getLogger(__name__)
# LOGGER.addHandler(logging.NullHandler())

SIG_PAD = blinker.signal('pad')
SIG_TABLE = blinker.signal('table')


_ = os.environ.get("ALIGNER_DEBUG")
if _ is not None and _.lower() in ["1", "true"]:
    level = 20
else:
    level = 20
from logzero import setup_logger
logger = setup_logger(
    name=__file__,
    level=level,
)
logger.debug('os.environ.get("ALIGNER_DEBUG"): %s', _)


def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = tk.Tk()
    top = MyPad(root)
    mypad_support.init(root, top)
    root.mainloop()


w = None


def create_MyPad(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = tk.Toplevel(root)
    top = MyPad(w)
    mypad_support.init(w, top, *args, **kwargs)
    return (w, top)


def destroy_MyPad():
    global w
    w.destroy()
    w = None


class MyPad(tk.Frame):

    data0 = pd.DataFrame({i: [i] + [''] * 3 for i in range(3)}).T

    data_o = pd.DataFrame({i: [None] * 4 for i in range(3)}).T

    # def __init__(self, data=data0, top=None):
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        super().__init__(master=top)

        # https://www.mattlayman.com/blog/2015/blinker/

        def handle_signal(sender, **kw):
            self.slot_pad(sender, **kw)
        self.handle_signal = handle_signal
        # SIG_TABLE.connect(handle_signal)
        SIG_PAD.connect(handle_signal)

        self.data = self.data0

        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9'  # X11 color: 'gray85'
        _ana1color = '#d9d9d9'  # X11 color: 'gray85'
        _ana2color = '#ececec'  # Closest X11 color: 'gray92'
        font9 = (
            "-family {Segoe UI} -size 9 -weight normal -slant "
            "roman -underline 0 -overstrike 0"
        )
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.', background=_bgcolor)
        self.style.configure('.', foreground=_fgcolor)
        self.style.configure('.', font="TkDefaultFont")
        self.style.map(
            '.', background=[('selected', _compcolor), ('active', _ana2color)]
        )

        # top.geometry("982x298+318+28")
        # top.title("MyPad")
        top.configure(background="#d9d9d9")
        top.configure(highlightbackground="#d9d9d9")
        top.configure(highlightcolor="black")

        self.Frame1 = tk.Frame(top)
        self.Frame1.place(relx=0.0, rely=0.0, relheight=0.332, relwidth=1.0)
        self.Frame1.configure(relief='groove')
        self.Frame1.configure(borderwidth="2")
        self.Frame1.configure(relief="groove")
        self.Frame1.configure(background="#d9d9d9")
        self.Frame1.configure(width=125)

        self.c00 = ttk.Label(self.Frame1)
        self.c00.place(relx=0.0, rely=0.0, relheight=1.0, relwidth=0.05)
        self.c00.configure(background="#d9d9d9")
        self.c00.configure(foreground="#000000")
        self.c00.configure(font="TkDefaultFont")
        self.c00.configure(relief="flat")
        self.c00.configure(takefocus="0")
        self.c00.configure(text='''00''')

        self.c01 = ScrolledText(self.Frame1, wrap=tk.WORD)
        self.c01.place(relx=0.05, rely=0.0, relheight=1, relwidth=0.45)
        self.c01.configure(background="white")
        self.c01.configure(font=font9)
        self.c01.configure(foreground="black")
        self.c01.configure(highlightbackground="#d9d9d9")
        self.c01.configure(highlightcolor="black")
        self.c01.configure(insertbackground="black")
        self.c01.configure(insertborderwidth="3")
        self.c01.configure(selectbackground="#c4c4c4")
        self.c01.configure(selectforeground="black")
        self.c01.configure(takefocus="0")
        self.c01.configure(width=10)
        self.c01.configure(wrap="word")

        self.c02 = ScrolledText(self.Frame1)
        # self.c02 = tk.Text(self.Frame1)
        self.c02.place(relx=0.5, rely=0.0, relheight=1, relwidth=0.45)
        self.c02.configure(background="white")
        self.c02.configure(font=font9)
        self.c02.configure(foreground="black")
        self.c02.configure(highlightbackground="#d9d9d9")
        self.c02.configure(highlightcolor="black")
        self.c02.configure(insertbackground="black")
        self.c02.configure(insertborderwidth="3")
        self.c02.configure(selectbackground="#c4c4c4")
        self.c02.configure(selectforeground="black")
        self.c02.configure(takefocus="0")
        self.c02.configure(width=10)
        self.c02.configure(wrap="word")

        self.c03 = tk.Text(self.Frame1)
        self.c03.place(relx=0.95, rely=0.0, relheight=1, relwidth=0.05)
        self.c03.configure(background="white")
        self.c03.configure(font=font9)
        self.c03.configure(foreground="black")
        self.c03.configure(highlightbackground="#d9d9d9")
        self.c03.configure(highlightcolor="black")
        self.c03.configure(insertbackground="black")
        self.c03.configure(selectbackground="#c4c4c4")
        self.c03.configure(selectforeground="black")
        self.c03.configure(takefocus="0")
        self.c03.configure(width=10)
        self.c03.configure(wrap="word")

        # filename = 'frame2.py'
        # exec(dedent(Path(f'{filename}').read_text()))
        self.Frame2 = tk.Frame(top)
        self.Frame2.place(relx=0.0, rely=0.333, relheight=0.332, relwidth=1.0)
        self.Frame2.configure(relief='groove')
        self.Frame2.configure(borderwidth="2")
        self.Frame2.configure(relief="groove")
        self.Frame2.configure(background="#d9d9d9")
        self.Frame2.configure(width=125)

        self.c10 = ttk.Label(self.Frame2)
        self.c10.place(relx=0.0, rely=0.0,  relheight=1.0, relwidth=0.05)
        # self.c10.configure(background="#d9d9d9")
        # self.c10.configure(background="#1979a9")
        self.c10.configure(background="#0099cc")
        self.c10.configure(foreground="#000000")
        self.c10.configure(font="TkDefaultFont")
        self.c10.configure(relief="flat")
        self.c10.configure(takefocus="0")
        self.c10.configure(text='''01''')

        self.c11 = ScrolledText(self.Frame2)
        self.c11.place(relx=0.05, rely=0., relheight=1, relwidth=0.45)
        self.c11.configure(background="white")
        self.c11.configure(font=font9)
        self.c11.configure(foreground="black")
        self.c11.configure(highlightbackground="#d9d9d9")
        self.c11.configure(highlightcolor="black")
        # self.c11.configure(highlightcolor="blue")
        self.c11.configure(insertbackground="black")
        self.c11.configure(insertborderwidth="3")
        self.c11.configure(selectbackground="#c4c4c4")
        self.c11.configure(selectforeground="black")
        self.c11.configure(takefocus="0")
        self.c11.configure(width=10)
        self.c11.configure(wrap="none")

        self.c12 = ScrolledText(self.Frame2)
        self.c12.place(relx=0.5, rely=0., relheight=1, relwidth=0.45)
        self.c12.configure(background="white")
        self.c12.configure(font=font9)
        self.c12.configure(foreground="black")
        self.c12.configure(highlightbackground="#d9d9d9")
        self.c12.configure(highlightcolor="black")
        self.c12.configure(insertbackground="black")
        self.c12.configure(insertborderwidth="3")
        self.c12.configure(selectbackground="#c4c4c4")
        self.c12.configure(selectforeground="black")
        self.c12.configure(takefocus="0")
        self.c12.configure(width=10)
        self.c12.configure(wrap="none")

        self.c13 = tk.Text(self.Frame2)
        self.c13.place(relx=0.95, rely=0., relheight=1, relwidth=0.05)
        self.c13.configure(background="white")
        self.c13.configure(font=font9)
        self.c13.configure(foreground="black")
        self.c13.configure(highlightbackground="#d9d9d9")
        self.c13.configure(highlightcolor="black")
        self.c13.configure(insertbackground="black")
        self.c13.configure(selectbackground="#c4c4c4")
        self.c13.configure(selectforeground="black")
        self.c13.configure(takefocus="0")
        self.c13.configure(width=10)
        self.c13.configure(wrap="word")

        # filename = 'frame3.py'
        # exec(dedent(Path(f'{filename}').read_text()))
        self.Frame3 = tk.Frame(top)
        self.Frame3.place(relx=0.0, rely=0.666, relheight=0.332, relwidth=1.0)
        self.Frame3.configure(relief='groove')
        self.Frame3.configure(borderwidth="2")
        self.Frame3.configure(relief="groove")
        self.Frame3.configure(background="#d9d9d9")
        self.Frame3.configure(width=125)

        self.c20 = ttk.Label(self.Frame3)
        self.c20.place(relx=0.0, rely=0.0,  relheight=1.0, relwidth=0.05)
        self.c20.configure(background="#d9d9d9")
        self.c20.configure(foreground="#000000")
        self.c20.configure(font="TkDefaultFont")
        self.c20.configure(relief="flat")
        self.c20.configure(takefocus="0")
        self.c20.configure(text='''02''')

        self.c21 = ScrolledText(self.Frame3)
        self.c21.place(relx=0.05, rely=0., relheight=1, relwidth=0.45)
        self.c21.configure(background="white")
        self.c21.configure(font=font9)
        self.c21.configure(foreground="black")
        self.c21.configure(highlightbackground="#d9d9d9")
        self.c21.configure(highlightcolor="black")
        self.c21.configure(insertbackground="black")
        self.c21.configure(insertborderwidth="3")
        self.c21.configure(selectbackground="#c4c4c4")
        self.c21.configure(selectforeground="black")
        self.c21.configure(takefocus="0")
        self.c21.configure(width=10)
        self.c21.configure(wrap="none")

        self.c22 = ScrolledText(self.Frame3)
        self.c22.place(relx=0.5, rely=0., relheight=1, relwidth=0.45)
        self.c22.configure(background="white")
        self.c22.configure(font=font9)
        self.c22.configure(foreground="black")
        self.c22.configure(highlightbackground="#d9d9d9")
        self.c22.configure(highlightcolor="black")
        self.c22.configure(insertbackground="black")
        self.c22.configure(insertborderwidth="3")
        self.c22.configure(selectbackground="#c4c4c4")
        self.c22.configure(selectforeground="black")
        self.c22.configure(takefocus="0")
        self.c22.configure(width=10)
        self.c22.configure(wrap="none")

        self.c23 = tk.Text(self.Frame3)
        self.c23.place(relx=0.95, rely=0., relheight=1, relwidth=0.05)
        self.c23.configure(background="white")
        self.c23.configure(font=font9)
        self.c23.configure(foreground="black")
        self.c23.configure(highlightbackground="#d9d9d9")
        self.c23.configure(highlightcolor="black")
        self.c23.configure(insertbackground="black")
        self.c23.configure(selectbackground="#c4c4c4")
        self.c23.configure(selectforeground="black")
        self.c23.configure(takefocus="0")
        self.c23.configure(width=10)
        self.c23.configure(wrap="word")

        # """

        self.row0, self.col0 = 3, 4
        self.show()

        self.bind('<ButtonRelease-1>',lambda e: self.onKeyReleasexxx(e))
        self.bind('<KeyRelease>',lambda e: self.onKeyReleasexxx(e))

        # bind cells to click-release and key-release
        for idx in range(3):
            for jdx in range(1, 4):
                getattr(self, f'c{idx}{jdx}').bind('<ButtonRelease-1>',lambda e: self.onKeyReleasexxx(e))
                getattr(self, f'c{idx}{jdx}').bind('<KeyRelease>',lambda e: self.onKeyReleasexxx(e))
    def show(self):
        # row0, col0 = 3, 4
        row0, col0 = self.row0, self.col0
        for idx in range(row0):
            for jdx in range(col0):
                update_pad_cell(self, idx, jdx, self.data.iat[idx, jdx])
        self.data_o = self.data.copy()

    def redraw(self):
        '''redraw'''
        row0, col0 = self.row0, self.col0
        logger.debug('self.data_o \n%s', self.data_o)
        logger.debug('self.data: \n%s', self.data)

        # print('self.data_o \n%s' % self.data_o)
        # print('self.data: \n%s' % self.data)

        df0 = self.data.copy()

        self.data_o.index = df0.index
        self.data_o.columns = df0.columns

        # print('self.data_o \n%s' % self.data_o)
        # print('df0: \n%s' % df0)

        truth_table = self.data_o == df0
        for idx in range(row0):
            for jdx in range(col0):
                # update if different
                if not truth_table.iat[idx, jdx]:
                    update_pad_cell(self, idx, jdx, df0.iat[idx, jdx])
        # save a copy to data_o for next round
        self.data_o = df0.copy()

        logger.debug('MyPad.redraw() done')

    # @SIG_TABLE.connect
    def slot_pad(self, sender, **kw):
        ''' handle data from signal('table') in left_clicked '''
        logger.debug('slot_pad received: sender: %s \n%s', sender, kw)

        if kw.get('data') is not None:
            df1 = kw.get('data')

            # df1.insert(0, 'i', df1.index + 1)
            df1.insert(
                0,
                'i',
                [(elm + 1) if isinstance(elm, int) else elm for elm in df1.index],
            )
            self.data = df1

            logger.debug('in slot_pad executing  self.redraw() ')
            self.redraw()

    # """

    def onKeyReleasexxx(self,p1):
        logger.debug('self.onKeyReleasexxx')
        sys.stdout.flush()
        # update self.data
        for idx in range(3):
            for jdx in range(1, 4):
                self_c = getattr(self, f'c{idx}{jdx}')
                cont = self_c.get('0.0', 'end').strip()
                self.data.iat[idx, jdx] = cont

        # send to slot
        # SIG_PAD.send('pad', data=self.data)
        SIG_TABLE.send('pad', data=self.data)


# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        # self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = (
                tk.Pack.__dict__.keys()
                | tk.Grid.__dict__.keys()
                | tk.Place.__dict__.keys()
            )
        else:
            methods = (
                tk.Pack.__dict__.keys()
                + tk.Grid.__dict__.keys()
                + tk.Place.__dict__.keys()
            )

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''

        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)

        return wrapped

    def __str__(self):
        return str(self.master)


def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''

    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        container.bind('<Enter>', lambda e: _bound_to_mousewheel(e, container))
        container.bind('<Leave>', lambda e: _unbound_to_mousewheel(e, container))
        return func(cls, container, **kw)

    return wrapped


class ScrolledText(AutoScroll, tk.Text):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''

    @_create_container
    def __init__(self, master, **kw):
        tk.Text.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

import platform


def _bound_to_mousewheel(event, widget):
    child = widget.winfo_children()[0]
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        child.bind_all('<MouseWheel>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-MouseWheel>', lambda e: _on_shiftmouse(e, child))
    else:
        child.bind_all('<Button-4>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Button-5>', lambda e: _on_mousewheel(e, child))
        child.bind_all('<Shift-Button-4>', lambda e: _on_shiftmouse(e, child))
        child.bind_all('<Shift-Button-5>', lambda e: _on_shiftmouse(e, child))


def _unbound_to_mousewheel(event, widget):
    if platform.system() == 'Windows' or platform.system() == 'Darwin':
        widget.unbind_all('<MouseWheel>')
        widget.unbind_all('<Shift-MouseWheel>')
    else:
        widget.unbind_all('<Button-4>')
        widget.unbind_all('<Button-5>')
        widget.unbind_all('<Shift-Button-4>')
        widget.unbind_all('<Shift-Button-5>')


def _on_mousewheel(event, widget):
    if platform.system() == 'Windows':
        widget.yview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.yview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.yview_scroll(-1, 'units')
        elif event.num == 5:
            widget.yview_scroll(1, 'units')


def _on_shiftmouse(event, widget):
    if platform.system() == 'Windows':
        widget.xview_scroll(-1 * int(event.delta / 120), 'units')
    elif platform.system() == 'Darwin':
        widget.xview_scroll(-1 * int(event.delta), 'units')
    else:
        if event.num == 4:
            widget.xview_scroll(-1, 'units')
        elif event.num == 5:
            widget.xview_scroll(1, 'units')


if __name__ == '__main__':
    vp_start_gui()
